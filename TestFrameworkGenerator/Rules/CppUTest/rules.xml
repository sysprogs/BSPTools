<?xml version="1.0"?>
<TestFrameworkRules xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<CopyJobs>
		<CopyJob>
			<SourceFolder>$$BSPGEN:INPUT_DIR$$</SourceFolder>
			<FilesToCopy>src\CppUTest\*.cpp;src\CppUTestExt\*.cpp;include\CppUTest\*.h;include\CppUTestExt\*.h</FilesToCopy>
			<TargetFolder></TargetFolder>
			<AutoIncludeMask>-*</AutoIncludeMask>
			<AdditionalIncludeDirs>include</AdditionalIncludeDirs>
			<Patches>
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\CommandLineTestRunner.cpp</FilePath>
					<AfterLine>#include "CppUTest/TestRegistry.h"</AfterLine>
					<InsertedLines>
						<string>#include "SysprogsTestHooks.h"</string>
					</InsertedLines>
				</Patch>	
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\CommandLineTestRunner.cpp</FilePath>
					<AfterLine>    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);</AfterLine>
					<InsertedLines>
						<string>    SysprogsTestHook_TestsCompleted();</string>
					</InsertedLines>
				</Patch>	
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\MemoryLeakWarningPlugin.cpp</FilePath>
					<AfterLine>#include "CppUTest/SimpleMutex.h"</AfterLine>
					<InsertedLines>
						<string>#include "SysprogsTestHooks.h"</string>
					</InsertedLines>
				</Patch>	
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\MemoryLeakWarningPlugin.cpp</FilePath>
					<AfterLine>            result.addFailure(f);</AfterLine>
					<InsertedLines>
						<string>        SysprogsTestHook_TestFailed(&amp;test, f.getMessage().asCharString(), 0);</string>
					</InsertedLines>
				</Patch>	
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\TestRegistry.cpp</FilePath>
					<AfterLine>#include "CppUTest/TestRegistry.h"</AfterLine>
					<InsertedLines>
						<string>#include "SysprogsTestHooks.h"</string>
					</InsertedLines>
				</Patch>	
				<Patch xsi:type="ReplaceLine">
					<FilePath>src\CppUTest\TestRegistry.cpp</FilePath>
					<OldLine>    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {</OldLine>
					<NewLine>    int testCount = 0, testNumber = 0;
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) 
        testCount++;
    
    UtestShell **pTests = (UtestShell **)malloc(testCount * sizeof(UtestShell));
    UtestShell **pEnabledTests = (UtestShell **)malloc(testCount * sizeof(UtestShell));
    
    for (UtestShell *test = tests_; test != NULLPTR &amp;&amp; testNumber &lt; testCount; test = test-&gt;getNext(), testNumber++) 
    {
        pTests[testNumber] = test;
        pEnabledTests[testNumber] = test;
    }
    
    testCount = testNumber;
    SysprogsTestHook_SelectTests(testCount, (void **)pEnabledTests);
    
    for (int i = 0; i &lt; testCount; i++) {
        UtestShell *test = pTests[i];</NewLine>
				</Patch>	
				<Patch xsi:type="ReplaceLine">
					<FilePath>src\CppUTest\TestRegistry.cpp</FilePath>
					<OldLine>        if (testShouldRun(test, result)) {</OldLine>
					<NewLine>        if (pEnabledTests[i] &amp;&amp; testShouldRun(test, result)) {
#ifdef ANDROID
            SysprogsTestHook_TestStartingEx((test-&gt;getGroup() + "::" + test-&gt;getName()).asCharString());
#else
            SysprogsTestHook_TestStarting(test);
#endif
</NewLine>
				</Patch>	
				<Patch xsi:type="ReplaceLine">
					<FilePath>src\CppUTest\TestRegistry.cpp</FilePath>
					<OldLine>            result.currentTestEnded(test);</OldLine>
					<NewLine>            result.currentTestEnded(test);
            SysprogsTestHook_TestEnded();</NewLine>
				</Patch>	
				<Patch xsi:type="ReplaceLine">
					<FilePath>src\CppUTest\TestRegistry.cpp</FilePath>
					<OldLine>    result.testsEnded();</OldLine>
					<NewLine>    free(pTests);
    free(pEnabledTests);
    result.testsEnded();</NewLine>
				</Patch>	
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\Utest.cpp</FilePath>
					<AfterLine>#include "CppUTest/TestRegistry.h"</AfterLine>
					<InsertedLines>
						<string>#include "SysprogsTestHooks.h"</string>
					</InsertedLines>
				</Patch>	
				<Patch xsi:type="InsertLines">
					<FilePath>src\CppUTest\Utest.cpp</FilePath>
					<AfterLine>    hasFailed_ = true;</AfterLine>
					<InsertedLines>
						<string>    SysprogsTestHook_TestFailed(this, failure.getMessage().asCharString(), 0);</string>
					</InsertedLines>
				</Patch>	
			</Patches>	
			<SmartFileConditions>
				<string>-Enable CppUTestExt (mocks, etc)[com.sysprogs.testfw.cpputest.ext]|[^\\]+\\CppUTestExt\\.*</string>
			</SmartFileConditions>
			</CopyJob>			
		<CopyJob>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\platforms</SourceFolder>
			<FilesToCopy>*</FilesToCopy>
			<TargetFolder>Platforms</TargetFolder>
			<AutoIncludeMask>-*</AutoIncludeMask>	
			<SimpleFileConditions>
				<string>Embedded\.*: $$platform$$ == embedded</string>
			</SimpleFileConditions>
		</CopyJob>			
		<CopyJob>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\..\common</SourceFolder>
			<FilesToCopy>*</FilesToCopy>
			<TargetFolder>Platforms</TargetFolder>
			<AutoIncludeMask>*SysprogsTestHooks.h</AutoIncludeMask>	
		</CopyJob>			
		<CopyJob>
			<SourceFolder>$$BSPGEN:INPUT_DIR$$\src\Platforms\Gcc</SourceFolder>
			<FilesToCopy>*</FilesToCopy>
			<TargetFolder>Platforms\Linux</TargetFolder>
			<AutoIncludeMask>-*.h</AutoIncludeMask>	
			<SimpleFileConditions>
				<string>.*: $$platform$$ == linux</string>
			</SimpleFileConditions>
		</CopyJob>			
	</CopyJobs>
</TestFrameworkRules>