<?xml version="1.0"?>
<TestFrameworkDefinition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<ID>com.sysprogs.unittest.googletest</ID>
	<Name>GoogleTest</Name>
	<Version>20231020-1.10.0</Version>
	<Embedded>
		<TestSelection xsi:type="HookBasedTestSelectionViaNames">
		  <HookedEntry>SysprogsTestHook_SelectTests</HookedEntry>
		  <TestCountExpression>testCount</TestCountExpression>
		  <AddressOfTestArrayExpression>pTests</AddressOfTestArrayExpression>
		  <TestNameExpression>{((testing::TestInfo*){&amp;})-&gt;test_case_name_-&gt;_M_dataplus-&gt;_M_p:s}_{((testing::TestInfo*){&amp;})-&gt;name_-&gt;_M_dataplus-&gt;_M_p:s}</TestNameExpression>
		</TestSelection>
		<TestReportChannel xsi:type="SemihostingBasedTestChannel">
		</TestReportChannel>
		<AdditionalPreprocessorMacros>
			<string>SYSPROGS_TEST_PLATFORM_EMBEDDED</string>
			<string>_GNU_SOURCE</string>
			<string>_POSIX_PATH_MAX=260</string>
		</AdditionalPreprocessorMacros>
		<AdditionalIncludeDirs>
			<string>platforms\Embedded</string>
		</AdditionalIncludeDirs>
		<RequiredFrameworks>
			<string>com.sysprogs.embedded.semihosting_and_profiler@1.1</string>
		</RequiredFrameworks>
		<InitializationLines>
			<string>char *argv = (char *)"";</string>
			<string>int argc = 1;</string>
			<string>testing::InitGoogleTest(&amp;argc, &amp;argv);</string>
			<string>(void)RUN_ALL_TESTS();</string>
		</InitializationLines>
	</Embedded>
	<Linux>
		<AdditionalPreprocessorMacros>
		  <string>GTEST_OS_LINUX</string>
		</AdditionalPreprocessorMacros>
		<AdditionalLibraries>
		  <string>pthread</string>
		</AdditionalLibraries>
		<TestSelection xsi:type="ArgumentBasedTestSelection">
		  <GlobalArgumentTemplate>--gtest_filter=$(PerTestArguments)</GlobalArgumentTemplate>
		  <PerTestArgumentSeparator>:</PerTestArgumentSeparator>
		  <PerTestArgumentTemplate>$(1).$(2)</PerTestArgumentTemplate>
          <TestIDRegex>(.*)::(.*)</TestIDRegex>
          <IDType>SecondaryID</IDType>
          <CommandLineLengthLimit>131072</CommandLineLengthLimit>
          <ResponseFileFormat>--gtest_flagfile={0}</ResponseFileFormat>
	    </TestSelection>
		<AdvancedTestDiscoverers>
		  <TestDiscoverer xsi:type="OutputBasedTestDiscoverer">
			<CommandLineArguments>--gtest_list_tests</CommandLineArguments>
			<TargetDemangledNames>true</TargetDemangledNames>
			<TestGroupRegex>^(|[^/]+/)([^ \t/]+)\.$</TestGroupRegex>
			<TestRegex>^[ \t]+([^ \t/]+)(|/[^ \t/]+)($| )</TestRegex>
			<UniqueNameFormat>{1}{2}_{4}{5}</UniqueNameFormat>
			<StructuredInternalNameFormat>{1}{2}.{4}{5}</StructuredInternalNameFormat>
			<UserFriendlyNameFormat>{1}{2}::{4}{5}</UserFriendlyNameFormat>
			<SecondaryIDFormat>{1}{2}::{4}{5}</SecondaryIDFormat>
			<ShortUserFriendlyNameFormat>{4}{5}</ShortUserFriendlyNameFormat>
			<LocationSymbolFormat>{2}_{4}_Test::TestBody()</LocationSymbolFormat>
		  </TestDiscoverer>
		</AdvancedTestDiscoverers>	
		<TestReportChannel xsi:type="PipeBasedTestChannelWithEnv">
		  <EnvironmentVariableName>SYSPROGS_TEST_REPORTING_PIPE</EnvironmentVariableName>
		  <PipeTimestampVariableName>g_SysprogsTestReportTimestamp</PipeTimestampVariableName>
		</TestReportChannel>
		<AdditionalPreprocessorMacros/>
		<InitializationLines>
			<string>testing::InitGoogleTest(&amp;argc, argv);</string>
			<string>return RUN_ALL_TESTS();</string>
		</InitializationLines>		
	</Linux>
  <Windows>
    <AdditionalSourceFiles />
    <AdditionalHeaderFiles />
    <AdditionalPreprocessorMacros />
    <AdditionalLibraries>
      <string>pthread</string>
    </AdditionalLibraries>
    <InitializationLines>
      <string>testing::InitGoogleTest(&amp;argc, argv);</string>
      <string>return RUN_ALL_TESTS();</string>
    </InitializationLines>
    <AdvancedTestDiscoverers>
      <TestDiscoverer xsi:type="OutputBasedTestDiscoverer">
        <TargetDemangledNames>true</TargetDemangledNames>
        <CommandLineArguments>--gtest_list_tests</CommandLineArguments>
        <TestGroupRegex>^(|[^/]+/)([^ \t/]+)\.$</TestGroupRegex>
        <TestRegex>^[ \t]+([^ \t/]+)(|/[^ \t/]+)($| )</TestRegex>
        <UniqueNameFormat>{1}{2}_{4}{5}</UniqueNameFormat>
        <SecondaryIDFormat>{1}{2}::{4}{5}</SecondaryIDFormat>
        <StructuredInternalNameFormat>{1}{2}.{4}{5}</StructuredInternalNameFormat>
        <UserFriendlyNameFormat>{1}{2}::{4}{5}</UserFriendlyNameFormat>
        <ShortUserFriendlyNameFormat>{4}{5}</ShortUserFriendlyNameFormat>
        <LocationSymbolFormat>{2}_{4}_Test::TestBody()</LocationSymbolFormat>
        <AttributeListGroup>0</AttributeListGroup>
      </TestDiscoverer>
    </AdvancedTestDiscoverers>
    <TestSelection xsi:type="ArgumentBasedTestSelection">
      <GlobalArgumentTemplate>--gtest_filter=$(PerTestArguments)</GlobalArgumentTemplate>
      <PerTestArgumentTemplate>$(1).$(2)</PerTestArgumentTemplate>
      <PerTestArgumentSeparator>:</PerTestArgumentSeparator>
      <TestIDRegex>(.*)::(.*)</TestIDRegex>
      <IDType>SecondaryID</IDType>
    </TestSelection>
    <TestReportChannel xsi:type="PipeBasedTestChannelWithEnv">
      <PipeTimestampVariableName>g_SysprogsTestReportTimestamp</PipeTimestampVariableName>
      <EnvironmentVariableName>SYSPROGS_TEST_REPORTING_PIPE</EnvironmentVariableName>
    </TestReportChannel>
  </Windows>	
	<Common>
    <TestDiscoverers>
	  <TestDiscoverer xsi:type="SymbolBasedScopedTestDiscoverer">
		<TargetDemangledNames>true</TargetDemangledNames>
		<TestSymbolRegex>^(.*)_(.*)_Test::TestBody\(\)$</TestSymbolRegex>
		<UniqueNameFormat>{2}_{3}</UniqueNameFormat>
		<StructuredInternalNameFormat>{1}{2}.{4}{5}</StructuredInternalNameFormat>
		<UserFriendlyNameFormat>{2}::{3}</UserFriendlyNameFormat>
		<ShortUserFriendlyNameFormat>{3}</ShortUserFriendlyNameFormat>
		<LocationSymbolFormat />
	  </TestDiscoverer>
    </TestDiscoverers>
		<TestHooks>
		  <TestHook xsi:type="TestsCompletedHook">
			<Expression>SysprogsTestHook_TestsCompleted</Expression>
			<Required>true</Required>
			<SkippedFrames>0</SkippedFrames>
		  </TestHook>
		  <TestHook xsi:type="GenericFailHook">
			<Expression>SysprogsTestHook_TestFailed</Expression>
			<Required>true</Required>
			<SkippedFrames>3</SkippedFrames>
			<AbortFurtherTests>false</AbortFurtherTests>
		  </TestHook>
		</TestHooks>
		<ConfigurableProperties>
			<PropertyGroups>
			  <PropertyGroup>
				<Properties>
					<PropertyEntry xsi:type="Integral">
					  <Name>Test time-out (seconds)</Name>
					  <UniqueID>com.sysprogs.testsettings.timeout</UniqueID>
					  <Description>Specifies the maximum delay</Description>
					  <MinValue>0</MinValue>
					  <MaxValue>86400</MaxValue>
					  <DefaultValue>1800</DefaultValue>
					</PropertyEntry>
					<PropertyEntry xsi:type="Boolean">
					  <Name>Show class name in test names</Name>
					  <UniqueID>com.sysprogs.tests.shortnames</UniqueID>
					  <ValueForTrue>0</ValueForTrue>
					  <ValueForFalse>1</ValueForFalse>
					  <DefaultValue>true</DefaultValue>
					</PropertyEntry>
			</Properties>
				<CollapsedByDefault>false</CollapsedByDefault>
			  </PropertyGroup>
			</PropertyGroups>
		</ConfigurableProperties>
		<IncludeLines>
			<string>#include &lt;gtest/gtest.h&gt;</string>
		</IncludeLines>
		<RequiredFunctions>
			<string>_ZN7testing8internal12UnitTestImpl11RunAllTestsEv</string>
		</RequiredFunctions>
		<Samples>
			<TestFrameworkSample>
				<UserFriendlyName>Basic GoogleTest Demo</UserFriendlyName>
				<Files>
					<string>samples\$$PROJECTNAME$$Tests.cpp</string>
				</Files>
			</TestFrameworkSample>
		</Samples>
	</Common>
	  <AndroidCommandLine>
		<InheritsFromLinux>true</InheritsFromLinux>
		<AdditionalPreprocessorMacros>
		  <string>GTEST_OS_LINUX_ANDROID</string>
		</AdditionalPreprocessorMacros>
		<AdditionalLibraries>
		  <string>pthread</string>
		</AdditionalLibraries>
		<TestReportChannel xsi:type="LocalSocketTestChannelWithEnv">
		  <PipeTimestampVariableName>g_SysprogsTestReportTimestamp</PipeTimestampVariableName>
		  <EnvironmentVariableName>SYSPROGS_TEST_REPORTING_SOCKET</EnvironmentVariableName>
		  <SocketReadyHook>SysprogsTestHook_ReportingSocketReady</SocketReadyHook>
		</TestReportChannel>
		<UsesSTL>true</UsesSTL>
		<UsesExceptions>true</UsesExceptions>
	  </AndroidCommandLine>
	  <AndroidApp>
		<AdditionalPreprocessorMacros>
		  <string>GTEST_OS_LINUX_ANDROID</string>
		</AdditionalPreprocessorMacros>
		<AdditionalLibraries>
		  <string>pthread</string>
		</AdditionalLibraries>
		<UsesSTL>true</UsesSTL>
		<UsesExceptions>true</UsesExceptions>
		<InheritsFromLinux>true</InheritsFromLinux>
		<TestReportChannel xsi:type="LocalSocketTestChannelWithHook">
		  <ChannelSelectionHook>SysprogsTestHook_QueryPipeName</ChannelSelectionHook>
		  <PipeNameAreaAddress>&amp;pipeName</PipeNameAreaAddress>
		  <PipeTimestampVariableName>g_SysprogsTestReportTimestamp</PipeTimestampVariableName>
		  <EnvironmentVariableName>SYSPROGS_TEST_REPORTING_SOCKET</EnvironmentVariableName>
		  <SocketReadyHook>SysprogsTestHook_ReportingSocketReady</SocketReadyHook>
		</TestReportChannel>
		<TestSelection xsi:type="HookBasedTestSelectionViaNames">
		  <HookedEntry>SysprogsTestHook_SelectTests</HookedEntry>
		  <TestCountExpression>testCount</TestCountExpression>
		  <AddressOfTestArrayExpression>pTests</AddressOfTestArrayExpression>
		  <TestNameExpression>{((testing::TestInfo*){&amp;})-&gt;test_case_name_-&gt;_M_dataplus-&gt;_M_p:s}_{((testing::TestInfo*){&amp;})-&gt;name_-&gt;_M_dataplus-&gt;_M_p:s}</TestNameExpression>
		</TestSelection>
		<InitializationLines>
			<string>char *argv = (char *)"";</string>
			<string>int argc = 1;</string>
			<string>testing::InitGoogleTest(&amp;argc, &amp;argv);</string>
			<string>(void)RUN_ALL_TESTS();</string>
		</InitializationLines>
	  </AndroidApp>
</TestFrameworkDefinition>