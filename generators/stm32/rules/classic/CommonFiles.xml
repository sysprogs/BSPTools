<?xml version="1.0"?>
<FamilyDefinition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<AdditionalFrameworks>
		<Framework>
			<Name>FreeRTOS</Name>
			<ID>com.sysprogs.arm.stm32.freertos</ID>
			<ProjectFolderName>FreeRTOS</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:L4_DIR$$\Middlewares\Third_Party\FreeRTOS</SourceFolder>
					<FilesToCopy>*.c;*.h;*.url;*.txt</FilesToCopy>
					<ProjectInclusionMask>-*template.c;-*template.h;-*.url;Source\Portable\MemMang\*;Source\portable\GCC\*;-Source\Portable\*;*</ProjectInclusionMask>
					<AutoIncludeMask/>
					<PreprocessorMacros>USE_FREERTOS</PreprocessorMacros>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/FreeRTOS/Source/$$com.sysprogs.bspoptions.stm32.freertos.cmsis$$;$$SYS:BSP_ROOT$$/FreeRTOS/Source/include;$$SYS:BSP_ROOT$$/FreeRTOS/Source/portable/GCC/ARM_$$com.sysprogs.bspoptions.stm32.freertos.portcore$$</AdditionalIncludeDirs>
					<Patches>
						<Patch xsi:type="ReplaceLine">
							<FilePath>Source\portable\GCC\ARM_CM4F\port.c</FilePath>
							<OldLine>#ifndef __VFP_FP__</OldLine>
							<NewLine>#if !defined(__VFP_FP__) || defined(__SOFTFP__)</NewLine>
						</Patch>
						<Patch xsi:type="ReplaceLine">
							<FilePath>Source\portable\GCC\ARM_CM4F\port.c</FilePath>
							<OldLine>	#error This port can only be used when the project options are configured to enable hardware floating point support.</OldLine>
							<NewLine>	#error This port can only be used when the project options are configured to enable hardware floating point support. Please switch to hardware FP or select a different FreeRTOS port on the Frameworks page of VisualGDB Project Properties.</NewLine>
						</Patch>
					</Patches>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.freertos.|FreeRTOS</SmartPropertyGroup>
					<SmartFileConditions>
						<string>Heap Implementation[heap]|
Source\\portable\\MemMang\\heap_1.c=>Heap1 - no support for freeing[heap_1];
Source\\portable\\MemMang\\heap_2.c=>Heap2 - no block consolidation[heap_2];
Source\\portable\\MemMang\\heap_3.c=>Heap3 - use newlib malloc()/free()[heap_3];
Source\\portable\\MemMang\\heap_4.c=>+Heap4 - contiguous heap area[heap_4];
Source\\portable\\MemMang\\heap_5.c=>Heap5 - scattered heap area[heap_5]
						</string>
						<string>--default=$$com.sysprogs.freertos.default_port$$|CPU Core support[portcore]|
Source\\portable\\GCC\\ARM_CM0\\.*=>ARM Cortex M0[CM0];
Source\\portable\\GCC\\ARM_CM23_NTZ\\non_secure\\.*=>ARM Cortex M23 (no TrustZone)[CM23_NTZ/non_secure];
Source\\portable\\GCC\\ARM_CM23\\non_secure\\.*=>ARM Cortex M23 (TrustZone - non-secure partition)[CM23/non_secure]];
Source\\portable\\GCC\\ARM_CM23\\secure\\.*=>ARM Cortex M23 (TrustZone - secure partition)[CM23/secure];
Source\\portable\\GCC\\ARM_CM3\\.*=>+ARM Cortex M3 or M4 with Software FP[CM3];
Source\\portable\\GCC\\ARM_CM33_NTZ\\non_secure\\.*=>ARM Cortex M33 (no TrustZone)[CM33_NTZ/non_secure];
Source\\portable\\GCC\\ARM_CM33\\non_secure\\.*=>ARM Cortex M33 (TrustZone - non-secure partition)[CM33/non_secure]];
Source\\portable\\GCC\\ARM_CM33\\secure\\.*=>ARM Cortex M33 (TrustZone - secure partitione)[CM33/secure];
Source\\portable\\GCC\\ARM_CM3_MPU\\.*=>ARM Cortex M3 with MPU[CM3_MPU];
Source\\portable\\GCC\\ARM_CM4_MPU\\.*=>ARM Cortex M4 with MPU[CM4_MPU];
Source\\portable\\GCC\\ARM_CM4F\\.*=>ARM Cortex M4 with Hardware FP[CM4F];
Source\\portable\\GCC\\ARM_CM7\\.*=>ARM Cortex M7[CM7/r0p1];
Source\\portable\\GCC\\ARM_CM7_MPU\\.*=>ARM Cortex M7 with MPU[CM7_MPU/r0p1];
						</string>
						<string>CMSIS RTOS Interface Version[cmsis]|
Source\\CMSIS_RTOS\\.*=>v1[CMSIS_RTOS];
Source\\CMSIS_RTOS_V2\\.*=>v2[CMSIS_RTOS_V2];
						</string>
					</SmartFileConditions>
				</CopyJob>
			</CopyJobs>
			<ConfigFiles>
				<ConfigFileDefinition>
					<Path>$$STM32:MP1_DIR$$\Middlewares\Third_Party\FreeRTOS\source\include\FreeRTOSConfig_template.h</Path>
					<FinalName>FreeRTOSConfig.h</FinalName>
					<ParserClass>BSPGenerationTools.ConfigFiles.FreeRTOSConfigParser</ParserClass>
					<TargetPathForInsertingIntoProject>$$SYS:BSP_ROOT$$/FreeRTOS/Source/include/FreeRTOSConfig_template.h</TargetPathForInsertingIntoProject>
				</ConfigFileDefinition>
			</ConfigFiles>
			<AdditionalSystemVars>
				<SysVarEntry>
					<Key>com.sysprogs.rtos_type</Key>
					<Value>com.sysprogs.freertos</Value>
				</SysVarEntry>
			</AdditionalSystemVars>
		</Framework>
		<Framework>
			<Name>LibJPEG</Name>
			<ID>com.sysprogs.arm.stm32.LibJPEG</ID>
			<ConfigurationFileTemplates>
                <ConfigurationFileTemplate>
                        <SourcePath>$$SYS:BSP_ROOT$$/LibJPEG/include/jconfig_template.h</SourcePath>
                        <TargetFileName>jconfig.h</TargetFileName>
                        <ExpandMacros>false</ExpandMacros>
                 </ConfigurationFileTemplate>
               <ConfigurationFileTemplate>
                        <SourcePath>$$SYS:BSP_ROOT$$/LibJPEG/include/jmorecfg_template.h</SourcePath>
                        <TargetFileName>jmorecfg.h</TargetFileName>
                        <ExpandMacros>false</ExpandMacros>
                 </ConfigurationFileTemplate>
                <!--jan17 ConfigurationFileTemplate>
                        <SourcePath>$$SYS:BSP_ROOT$$/LibJPEG/include/jdatasrc_conf_template.h</SourcePath>
                        <TargetFileName>jdatasrc_conf.h</TargetFileName>
                        <ExpandMacros>false</ExpandMacros>
                 </ConfigurationFileTemplate-->
				  <!--jan17 ConfigurationFileTemplate>
                       <SourcePath>$$SYS:BSP_ROOT$$/LibJPEG/source/jdatasrc_conf_template.c</SourcePath>
                        <TargetFileName>jdatasrc_conf.c</TargetFileName>
                        <ExpandMacros>false</ExpandMacros>
                 </ConfigurationFileTemplate-->
			</ConfigurationFileTemplates>				
			<ProjectFolderName>LibJPEG</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
				<string>com.sysprogs.arm.stm32.fatfs</string>
			</RequiredFrameworks>		
			<CopyJobs>			
				<CopyJob>
					<SourceFolder>$$STM32:F7_DIR$$\Middlewares\Third_Party\LibJPEG</SourceFolder>
					<FilesToCopy>*.c;*.h;*.txt;*.bmp;*.jpg</FilesToCopy>
					<ProjectInclusionMask>-*jpegtran.c;-*jmemmac.c;-*jmemdos.c;-*jmemname.c;-*jmemansi.c;-*jdatasrc_conf_template.c;source\j*.c;*.h</ProjectInclusionMask>
					<AutoIncludeMask/>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/LibJPEG/include</AdditionalIncludeDirs>
					<PreprocessorMacros></PreprocessorMacros>
					<SimpleFileConditions>
					</SimpleFileConditions>
					<Patches>
						<!--jan17 Patch xsi:type="ReplaceLine">
							<FilePath>source\jdatasrc_conf_template.c</FilePath>
							<OldLine>#include "jdatasrc_conf_template.h"</OldLine>
							<NewLine>#include "jdatasrc_conf.h"</NewLine>
						</Patch-->
					</Patches>
				</CopyJob>
				<CopyJob>
					<SourceFolder>$$BSPGEN:RULES_DIR$$\\config</SourceFolder>
					<FilesToCopy>jconfig.h</FilesToCopy>
					<TargetFolder>BSP\ConfigTemplates</TargetFolder>
					<ProjectInclusionMask>*.h</ProjectInclusionMask>				
				</CopyJob>
			</CopyJobs>
		</Framework>	
		<Framework>
			<Name>PolarSSL</Name>
			<ID>com.sysprogs.arm.stm32.PolarSSL</ID>
			     <ConfigurationFileTemplates>
                    <ConfigurationFileTemplate>
                        <SourcePath>$$SYS:BSP_ROOT$$/PolarSSL/include/polarssl/_config.h</SourcePath>
                        <TargetFileName>config.h</TargetFileName>
                        <ExpandMacros>false</ExpandMacros>
                        </ConfigurationFileTemplate>
					</ConfigurationFileTemplates>	
			<ProjectFolderName>PolarSSL</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>		
			<CopyJobs>			
				<CopyJob>
					<SourceFolder>$$BSPGEN:INPUT_DIR$$\PolarSSL</SourceFolder>
					<FilesToCopy>*.c;*.h;*.txt</FilesToCopy>
					<ProjectInclusionMask>-programs\*;-tests\*;-visualc\*;-scripts\*;-doxygen\*;*.c;*.h</ProjectInclusionMask>
					<AutoIncludeMask/>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/PolarSSL/include;$$SYS:BSP_ROOT$$/PolarSSL/include/polarssl</AdditionalIncludeDirs>
					<PreprocessorMacros></PreprocessorMacros>
					<AdvancedRenameRules>library\\(arc4|des|md4|md5|sha1)\.c$=>PolarSSL_{1}.c</AdvancedRenameRules>
				</CopyJob>
			</CopyJobs>
		</Framework>	
		<Framework>
			<Name>MbedTLS</Name>
			<ID>com.sysprogs.arm.stm32.mbedtls</ID>
			<ProjectFolderName>MbedTLS</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>		
			<CopyJobs>			
				<CopyJob>
					<SourceFolder>$$STM32:F7_DIR$$\Middlewares\Third_Party\mbedTLS</SourceFolder>
					<FilesToCopy>include\mbedtls\*.h;library\*.c</FilesToCopy>
					<ProjectInclusionMask>-library\timing.c;-library\x509*;-library\templates\*;*.c;*.h</ProjectInclusionMask>
					<AutoIncludeMask/>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/mbedtls/include</AdditionalIncludeDirs>
					<PreprocessorMacros>MBEDTLS_NO_PLATFORM_ENTROPY</PreprocessorMacros>
					<AdvancedRenameRules>library\\([^.\\]+)\.c$=>mbedtls_{1}.c</AdvancedRenameRules>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping> <!-- See lwIP -->
				</CopyJob>
			</CopyJobs>
		</Framework>	
		<Framework>
			<Name>FatFs</Name>
			<ID>com.sysprogs.arm.stm32.FatFs</ID>
               <ConfigurationFileTemplates>
                    <ConfigurationFileTemplate>
                        <SourcePath>$$SYS:BSP_ROOT$$/FatFs/src/ffconf_template.h</SourcePath>
                        <TargetFileName>ffconf.h</TargetFileName>
                        <ExpandMacros>false</ExpandMacros>
                        </ConfigurationFileTemplate>
					</ConfigurationFileTemplates>				  
			<ProjectFolderName>FatFs</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>		
			<CopyJobs>			
				<CopyJob>
					<SourceFolder>$$STM32:F7_DIR$$\Middlewares\Third_Party\FatFs</SourceFolder>
					<FilesToCopy>*.c;*.h;*.txt</FilesToCopy>
					<ProjectInclusionMask>-src\drivers\*;-src\option\cc*.c;-doc\*;*.c;*.h</ProjectInclusionMask>
					<AutoIncludeMask/>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/FatFs/src;$$SYS:BSP_ROOT$$/FatFs/src/drivers</AdditionalIncludeDirs>
					<PreprocessorMacros></PreprocessorMacros>
				</CopyJob>
				<CopyJob>
					<SourceFolder>$$BSPGEN:RULES_DIR$$\\config</SourceFolder>
					<FilesToCopy>ffconf.h</FilesToCopy>
					<TargetFolder>BSP\ConfigTemplates</TargetFolder>
					<AutoIncludeMask/>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/STM32F7xxxx/BSP/STM32756G_EVAL</AdditionalIncludeDirs>
					<ProjectInclusionMask>*.h</ProjectInclusionMask>				
				</CopyJob>
			</CopyJobs>
		</Framework>	
		<Framework>
					<!--LwIP -->
			<Name>LwIP</Name>
			<ID>com.sysprogs.arm.stm32.LwIP</ID>
			<ProjectFolderName>LwIP</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>			
			<CopyJobs>			
				<CopyJob>
					<SourceFolder>$$STM32:F7_DIR$$\Middlewares\Third_Party\LwIP</SourceFolder>
					<FilesToCopy>*.c;*.h;*.txt</FilesToCopy>
					<ProjectInclusionMask>-doc\*;system\OS\sys_arch.c;-test\*;-system\*;-*template.c;-*template.h;-*\fsdata.c;-*\makefsdata\*;-*\ethernetif.c;-src\core\ipv6\*;*.c;*.h</ProjectInclusionMask>
					<AutoIncludeMask/>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/LwIP/src/include;$$SYS:BSP_ROOT$$/LwIP/system;$$SYS:BSP_ROOT$$/LwIP/src/include/ipv4</AdditionalIncludeDirs>
					<PreprocessorMacros>LWIP_IPV4;LWIP_TIMEVAL_PRIVATE=0</PreprocessorMacros>
					<SimpleFileConditions>
						<string>system\\OS\\sys_arch.c: fw:com.sysprogs.arm.stm32.freertos</string>
						<string>src\\netif\\ppp\\polarssl\\: $$com.sysprogs.bspoptions.stm32.lwip.pssl$$ == 1</string>
					</SimpleFileConditions>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping> <!-- Different SDKs have slightly different versions of lwIP with non-trivial include paths, so translating the paths automatically may break build -->
					<Patches>
						<Patch xsi:type="InsertLines">
							<FilePath>src\include\lwip\sockets.h</FilePath>
							<AfterLine>#endif /* LWIP_TIMEVAL_PRIVATE */</AfterLine>
							<InsertedLines>
								<string>#if LWIP_TIMEVAL_PRIVATE == 0 </string>
								<string>#include  &lt;sys/types.h&gt;</string>
								<string>#endif /* LWIP_TIMEVAL_PRIVATE */</string>															
							</InsertedLines>
						</Patch>											
					</Patches>
				</CopyJob>
			</CopyJobs>
				<ConfigurableProperties>
				<PropertyGroups>
				  <PropertyGroup>
				  	<Properties>
					  <PropertyEntry xsi:type="Boolean">
						<Name>Include PPP support via PolarSSL</Name>
						<UniqueID>com.sysprogs.bspoptions.stm32.lwip.pssl</UniqueID>
						<ValueForTrue>1</ValueForTrue>
						<ValueForFalse>0</ValueForFalse>
					  </PropertyEntry>
					<CollapsedByDefault>false</CollapsedByDefault>
					</Properties>
				  </PropertyGroup>
				</PropertyGroups>
			</ConfigurableProperties>	
		</Framework>	
		<Framework>
			<Name>STM32 Utilities</Name>
			<ID>com.sysprogs.arm.stm32.utilities</ID>
			<ProjectFolderName>Utilities</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:F7_DIR$$\Utilities</SourceFolder>
					<FilesToCopy>CPU\*;Fonts\*;Log\*</FilesToCopy>
					<ProjectInclusionMask>-*conf_template.h;*.c;*.h</ProjectInclusionMask>
					<SimpleFileConditions>
						<string>CPU\\*: $$com.sysprogs.bspoptions.stm32.utils.cpu$$ == 1</string>
						<string>Fonts\\*: $$com.sysprogs.bspoptions.stm32.utils.fonts$$ == 1</string>
						<string>Log\\*: $$com.sysprogs.bspoptions.stm32.utils.log$$ == 1</string>
					</SimpleFileConditions>
				</CopyJob>
			</CopyJobs>
			<ConfigurableProperties>
				<PropertyGroups>
				  <PropertyGroup>
					<Name>STM32 Utilities</Name>
					<UniqueID>com.sysprogs.bspoptions.stm32.utils.</UniqueID>
					<Properties>
						<PropertyEntry xsi:type="Boolean"><Name>CPU Usage Monitor (FreeRTOS)</Name><UniqueID>cpu</UniqueID><DefaultValue>false</DefaultValue><ValueForTrue>1</ValueForTrue></PropertyEntry>
						<PropertyEntry xsi:type="Boolean"><Name>Fonts</Name><UniqueID>fonts</UniqueID><DefaultValue>false</DefaultValue><ValueForTrue>1</ValueForTrue></PropertyEntry>
						<PropertyEntry xsi:type="Boolean"><Name>LCD Logging Support</Name><UniqueID>log</UniqueID><DefaultValue>false</DefaultValue><ValueForTrue>1</ValueForTrue></PropertyEntry>
					</Properties>
					<CollapsedByDefault>false</CollapsedByDefault>
				  </PropertyGroup>
				</PropertyGroups>
			</ConfigurableProperties>			
		</Framework>
		<Framework>
			<Name>STM32 Audio</Name>
			<ID>com.sysprogs.arm.stm32.audio</ID>
			<ProjectFolderName>Audio</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:F7_DIR$$\Middlewares\ST\STM32_Audio</SourceFolder>
					<TargetFolder>Middlewares\ST\STM32_Audio</TargetFolder>
					<FilesToCopy>*.c;*.h;*_GCC_*.a</FilesToCopy>
					<ProjectInclusionMask>*.c;*.h</ProjectInclusionMask>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>AzureRTOS - ThreadX</Name>
			<ID>com.sysprogs.arm.stm32.threadx</ID>
			<ProjectFolderName>ThreadX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:LATEST_THREADX_SDK_DIR$$\Middlewares\ST\threadx</SourceFolder>
					<TargetFolder>AzureRTOS\threadx</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
					<!-- tx_initialize_low_level.S included in m23/m33 ports is redundant against the sample projects -->
					<ProjectInclusionMask>common\*.c;common\*.h;-*\example_build\*;-*\tx_initialize_low_level.*;ports\cortex_*\gnu\*</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.threadx.|ThreadX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<AdditionalIncludeDirs>common/inc;ports/cortex_$$com.sysprogs.bspoptions.arm.core$$/gnu/inc</AdditionalIncludeDirs>
					<SmartPreprocessorMacros>
						<string>Include user-provided definition file[user_define]|{0}|TX_INCLUDE_USER_DEFINE_FILE</string>
					</SmartPreprocessorMacros>
					<SimpleFileConditions> 
						<string>ports\\cortex_a7\\.*:$$com.sysprogs.bspoptions.arm.core$$==A7</string>
						<string>ports\\cortex_m0\\.*:$$com.sysprogs.bspoptions.arm.core$$==M0</string>
						<string>ports\\cortex_m3\\.*:$$com.sysprogs.bspoptions.arm.core$$==M3</string>
						<string>ports\\cortex_m4\\.*:$$com.sysprogs.bspoptions.arm.core$$==M4</string>
						<string>ports\\cortex_m7\\.*:$$com.sysprogs.bspoptions.arm.core$$==M7</string>
						<string>ports\\cortex_m23\\.*:$$com.sysprogs.bspoptions.arm.core$$==M23</string>
						<string>ports\\cortex_m33\\.*:$$com.sysprogs.bspoptions.arm.core$$==M33</string>
						<string>ports\\cortex_m55\\.*:$$com.sysprogs.bspoptions.arm.core$$==M55</string>
						<string>ports\\cortex_m85\\.*:$$com.sysprogs.bspoptions.arm.core$$==M85</string>
						<string>common\\src\\tx_thread_stack_error_(handler|notify)\.[ch]:$$com.sysprogs.bspoptions.arm.core$$=~[AM][0-9]$</string>
					</SimpleFileConditions>
				</CopyJob>
			</CopyJobs>
			<AdditionalSystemVars>
				<SysVarEntry>
					<Key>com.sysprogs.rtos_type</Key>
					<Value>com.sysprogs.threadx</Value>
				</SysVarEntry>
			</AdditionalSystemVars>
		</Framework>
		<Framework>
			<Name>AzureRTOS - FileX</Name>
			<ID>com.sysprogs.arm.stm32.filex</ID>
			<ProjectFolderName>FileX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:LATEST_THREADX_SDK_DIR$$\Middlewares\ST\filex</SourceFolder>
					<TargetFolder>AzureRTOS\filex</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
					<ProjectInclusionMask>-common\drivers\template\*;common\*.c;common\*.h;ports\cortex_*\*.c;ports\cortex_*\*.h;</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.filex.|FileX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<AdditionalIncludeDirs>common/inc;ports/cortex_$$com.sysprogs.bspoptions.arm.core$$/gnu/inc</AdditionalIncludeDirs>
					<SimpleFileConditions> 
						<string>ports\\cortex_m0\\.*:$$com.sysprogs.bspoptions.arm.core$$==M0</string>
						<string>ports\\cortex_m3\\.*:$$com.sysprogs.bspoptions.arm.core$$==M3</string>
						<string>ports\\cortex_m4\\.*:$$com.sysprogs.bspoptions.arm.core$$==M4</string>
						<string>ports\\cortex_m7\\.*:$$com.sysprogs.bspoptions.arm.core$$==M7</string>
					</SimpleFileConditions>
					<SmartFileConditions>
						<string>-NAND driver[levelx_nand]|.*\\fx_stm32_levelx_nand_driver\.(h|c)</string>
						<string>-NOR driver[levelx_nor]|.*\\fx_stm32_levelx_nor_driver\.(h|c)</string>
						<string>-MMC driver[mmc]|.*\\fx_stm32_mmc_driver\.(h|c)</string>
						<string>-SD driver[sd]|.*\\fx_stm32_sd_driver\.(h|c)</string>
						<string>-SRAM driver[sram]|.*\\fx_stm32_sram_driver\.(h|c)</string>
					</SmartFileConditions>
				</CopyJob>
				<CopyJob>
					<SourceFolder>$$STM32:LATEST_THREADX_SDK_DIR$$\Middlewares\ST\filex\ports\generic</SourceFolder>
					<TargetFolder>AzureRTOS\filex\ports\cortex_m33\gnu</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>AzureRTOS - LevelX</Name>
			<ID>com.sysprogs.arm.stm32.levelx</ID>
			<ProjectFolderName>LevelX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:LATEST_THREADX_SDK_DIR$$\Middlewares\ST\levelx</SourceFolder>
					<TargetFolder>AzureRTOS\levelx</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
					<ProjectInclusionMask>-common\drivers\template\*;common\*.c;common\*.h;ports\cortex_*\*.c;ports\cortex_*\*.h;</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.levelx.|LevelX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<AdditionalIncludeDirs>common/inc</AdditionalIncludeDirs>
					<SmartFileConditions>
						<string>-NAND simulator driver[nand_simulator]|.*\\lx_stm32_nand_simulator_driver\.(h|c)</string>
						<string>-NOR simulator driver[nor_simulator]|.*\\lx_stm32_nor_simulator_driver\.(h|c)</string>
						<string>-OSPI simulator driver[ospi]|.*\\lx_stm32_ospi_driver\.(h|c)</string>
						<string>-QSPI simulator driver[qspi]|.*\\lx_stm32_qspi_driver\.(h|c)</string>
					</SmartFileConditions>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>AzureRTOS - USBX</Name>
			<ID>com.sysprogs.arm.stm32.usbx</ID>
			<ProjectFolderName>USBX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:LATEST_THREADX_SDK_DIR$$\Middlewares\ST\usbx</SourceFolder>
					<TargetFolder>AzureRTOS\usbx</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask>-ports*;*.h</AutoIncludeMask>
					<AdditionalIncludeDirs>ports/cortex_$$com.sysprogs.bspoptions.arm.core$$/gnu/inc</AdditionalIncludeDirs>
					<ProjectInclusionMask>common\*.c;common\*.h;ports\cortex_*\gnu\*.c;ports\cortex_*\gnu\*.h;</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.usbx.|USBX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<SimpleFileConditions> 
						<string>ports\\cortex_a7\\.*:$$com.sysprogs.bspoptions.arm.core$$==A7</string>
						<string>ports\\cortex_m0\\.*:$$com.sysprogs.bspoptions.arm.core$$==M0</string>
						<string>ports\\cortex_m3\\.*:$$com.sysprogs.bspoptions.arm.core$$==M3</string>
						<string>ports\\cortex_m4\\.*:$$com.sysprogs.bspoptions.arm.core$$==M4</string>
						<string>ports\\cortex_m7\\.*:$$com.sysprogs.bspoptions.arm.core$$==M7</string>
					</SimpleFileConditions>
					<SmartFileConditions>
						<string>-USB Host Support[host_controllers]|common\\usbx(|_stm32)_host_controllers\\.*</string>
						<string>-USB Device Support[device_controllers]|common\\usbx(|_stm32)_device_controllers\\.*</string>
						<string>-Network Support[network]|common\\usbx_network\\.*</string>
						<string>-Pictbridge Support[pictbridge]|common\\usbx_pictbridge\\.*</string>
						
						<string>-Audio Device Class[device_class_audio]|common\\usbx_device_classes\\src\\ux_device_class_audio.*</string>
						<string>-CCID Class[device_class_ccid]|common\\usbx_device_classes\\src\\ux_device_class_ccid.*</string>
						<string>-CDC ACM Device Class[device_class_cdc_acm]|common\\usbx_device_classes\\src\\ux_device_class_cdc_acm.*</string>
						<string>-CDC ECM Device Class[device_class_cdc_ecm]|common\\usbx_device_classes\\src\\ux_device_class_cdc_ecm.*</string>
						<string>-DFU Device Class[device_class_dfu]|common\\usbx_device_classes\\src\\ux_device_class_dfu.*</string>
						<string>-HID Device Class[device_class_hid]|common\\usbx_device_classes\\src\\ux_device_class_hid.*</string>
						<string>-PIMA Device Class[device_class_pima]|common\\usbx_device_classes\\src\\ux_device_class_pima.*</string>
						<string>-Printer Device Class[device_class_printer]|common\\usbx_device_classes\\src\\ux_device_class_printer.*</string>
						<string>-RNDIS Device Class[device_class_rndis]|common\\usbx_device_classes\\src\\ux_device_class_rndis.*</string>
						<string>-Storage Device Class[device_class_storage]|common\\usbx_device_classes\\src\\ux_device_class_storage.*</string>
						<string>-Video Device Class[device_class_video]|common\\usbx_device_classes\\src\\ux_device_class_video.*</string>

						<string>-ASIX Host Class[host_class_asix]|common\\usbx_host_classes\\src\\ux_host_class_asix.*</string>
						<string>-Audio Host Class[host_class_audio]|common\\usbx_host_classes\\src\\ux_host_class_audio.*</string>
						<string>-CDC_ACM Host Class[host_class_cdc_acm]|common\\usbx_host_classes\\src\\ux_host_class_cdc_acm.*</string>
						<string>-CDC_ECM Host Class[host_class_cdc_ecm]|common\\usbx_host_classes\\src\\ux_host_class_cdc_ecm.*</string>
						<string>-GSER Host Class[host_class_gser]|common\\usbx_host_classes\\src\\ux_host_class_gser.*</string>
						<string>-HID Host Class[host_class_hid]|common\\usbx_host_classes\\src\\ux_host_class_hid.*</string>
						<string>-Hub Host Class[host_class_hub]|common\\usbx_host_classes\\src\\ux_host_class_hub.*</string>
						<string>-PIMA Host Class[host_class_pima]|common\\usbx_host_classes\\src\\ux_host_class_pima.*</string>
						<string>-Printer Host Class[host_class_printer]|common\\usbx_host_classes\\src\\ux_host_class_printer.*</string>
						<string>-Prolific Host Class[host_class_prolific]|common\\usbx_host_classes\\src\\ux_host_class_prolific.*</string>
						<string>-Storage Host Class[host_class_storage]|common\\usbx_host_classes\\src\\ux_host_class_storage.*</string>
						<string>-SWAR Host Class[host_class_swar]|common\\usbx_host_classes\\src\\ux_host_class_swar.*</string>
						<string>-Video Host Class[host_class_video]|common\\usbx_host_classes\\src\\ux_host_class_video.*</string>
					</SmartFileConditions>
				</CopyJob>
				<CopyJob>
					<SourceFolder>$$STM32:LATEST_THREADX_SDK_DIR$$\Middlewares\ST\usbx\ports\generic</SourceFolder>
					<TargetFolder>AzureRTOS\usbx\ports\cortex_m33\gnu</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
				</CopyJob>
			</CopyJobs>
		</Framework>
	</AdditionalFrameworks>
	<SmartSamples>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\HTTP_Netconn_STM32F2X</SourceFolder>
			<DestinationFolder>samples\HTTP_Netconn_STM32F2X</DestinationFolder>
			<AdditionalBuildTimeSources>
				<string>$$STM32:F2_DIR$$\Projects\NUCLEO-F207ZG\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Src\ethernetif.c</string>
				<string>$$STM32:F2_DIR$$\Projects\NUCLEO-F207ZG\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\ethernetif.h</string>
				<string>$$STM32:F2_DIR$$\Projects\NUCLEO-F207ZG\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\FreeRTOSConfig.h</string>
				<string>$$STM32:F2_DIR$$\Projects\NUCLEO-F207ZG\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\lwipopts.h</string>
				<string>$$STM32:F2_DIR$$\Projects\NUCLEO-F207ZG\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\stm32f2xx_hal_conf.h</string>
				<string>$$STM32:F2_DIR$$\Projects\NUCLEO-F207ZG\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\src\system_stm32f2xx.c</string>
			</AdditionalBuildTimeSources>
			<Patches>
				<Patch xsi:type="ReplaceLine">
					<FilePath>FreeRTOSConfig.h</FilePath>
					<OldLine> #define configTOTAL_HEAP_SIZE			( ( size_t ) ( 25 * 1024 ) )</OldLine>
					<NewLine> #define configTOTAL_HEAP_SIZE			( ( size_t ) ( 32 * 1024 ) )</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>lwipopts.h</FilePath>
					<OldLine>#define HTTPD_USE_CUSTOM_FSDATA   1</OldLine>
					<NewLine>#define HTTPD_USE_CUSTOM_FSDATA   0</NewLine>
				</Patch>
			</Patches>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\HTTP_Netconn_STM32F4X</SourceFolder>
			<DestinationFolder>samples\HTTP_Netconn_STM32F4X</DestinationFolder>
			<AdditionalBuildTimeSources>
				<string>$$STM32:F4_DIR$$\Projects\STM32F429ZI-Nucleo\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Src\ethernetif.c</string>
				<string>$$STM32:F4_DIR$$\Projects\STM32F429ZI-Nucleo\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\ethernetif.h</string>
				<string>$$STM32:F4_DIR$$\Projects\STM32F429ZI-Nucleo\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\FreeRTOSConfig.h</string>
				<string>$$STM32:F4_DIR$$\Projects\STM32F429ZI-Nucleo\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\lwipopts.h</string>
				<string>$$STM32:F4_DIR$$\Projects\STM32F429ZI-Nucleo\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\stm32f4xx_hal_conf.h</string>
				<string>$$STM32:F4_DIR$$\Projects\STM32F429ZI-Nucleo\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\src\system_stm32f4xx.c</string>
			</AdditionalBuildTimeSources>
			<Patches>
				<Patch xsi:type="ReplaceLine">
					<FilePath>FreeRTOSConfig.h</FilePath>
					<OldLine> #define configTOTAL_HEAP_SIZE			( ( size_t ) ( 25 * 1024 ) )</OldLine>
					<NewLine> #define configTOTAL_HEAP_SIZE			( ( size_t ) ( 32 * 1024 ) )</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>lwipopts.h</FilePath>
					<OldLine>#define HTTPD_USE_CUSTOM_FSDATA   1</OldLine>
					<NewLine>#define HTTPD_USE_CUSTOM_FSDATA   0</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>ethernetif.c</FilePath>
					<OldLine>#include "../Components/lan8742/lan8742.h"</OldLine>
					<NewLine>#include "lan8742.h"</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>ethernetif.c</FilePath>
					<OldLine>    Txbuffer[i].buffer = q->payload;</OldLine>
					<NewLine>    Txbuffer[i].buffer = (uint8_t*)q->payload;</NewLine>
				</Patch>
					<Patch xsi:type="ReplaceLine">
					<FilePath>ethernetif.c</FilePath>
					<OldLine>  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);</OldLine>
					<NewLine>  struct pbuf_custom *p = (struct pbuf_custom *)LWIP_MEMPOOL_ALLOC(RX_POOL);</NewLine>
				</Patch>
			</Patches>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\HTTP_Netconn_STM32F7X</SourceFolder>
			<DestinationFolder>samples\HTTP_Netconn_STM32F7X</DestinationFolder>
			<AdditionalBuildTimeSources>
				<string>$$STM32:F7_DIR$$\Projects\STM32746G-Discovery\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Src\ethernetif.c</string>
				<string>$$STM32:F7_DIR$$\Projects\STM32746G-Discovery\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\ethernetif.h</string>
				<string>$$STM32:F7_DIR$$\Projects\STM32746G-Discovery\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\FreeRTOSConfig.h</string>
				<string>$$STM32:F7_DIR$$\Projects\STM32746G-Discovery\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\lwipopts.h</string>
				<string>$$STM32:F7_DIR$$\Projects\STM32746G-Discovery\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\Inc\stm32f7xx_hal_conf.h</string>
				<string>$$STM32:F7_DIR$$\Projects\STM32746G-Discovery\Applications\LwIP\LwIP_HTTP_Server_Netconn_RTOS\src\system_stm32f7xx.c</string>
			</AdditionalBuildTimeSources>
			<Patches>
				<Patch xsi:type="ReplaceLine">
					<FilePath>FreeRTOSConfig.h</FilePath>
					<OldLine> #define configTOTAL_HEAP_SIZE			( ( size_t ) ( 25 * 1024 ) )</OldLine>
					<NewLine> #define configTOTAL_HEAP_SIZE			( ( size_t ) ( 32 * 1024 ) )</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>lwipopts.h</FilePath>
					<OldLine>#define HTTPD_USE_CUSTOM_FSDATA   1</OldLine>
					<NewLine>#define HTTPD_USE_CUSTOM_FSDATA   0</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>ethernetif.c</FilePath>
					<OldLine>#include "../Components/lan8742/lan8742.h"</OldLine>
					<NewLine>#include "lan8742.h"</NewLine>
				</Patch>
				<Patch xsi:type="ReplaceLine">
					<FilePath>ethernetif.c</FilePath>
					<OldLine>    Txbuffer[i].buffer = q->payload;</OldLine>
					<NewLine>    Txbuffer[i].buffer = (uint8_t*)q->payload;</NewLine>
				</Patch>
					<Patch xsi:type="ReplaceLine">
					<FilePath>ethernetif.c</FilePath>
					<OldLine>  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);</OldLine>
					<NewLine>  struct pbuf_custom *p = (struct pbuf_custom *)LWIP_MEMPOOL_ALLOC(RX_POOL);</NewLine>
				</Patch>
			</Patches>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\LEDBlink</SourceFolder>
			<DestinationFolder>samples\LEDBlink</DestinationFolder>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\LEDBlink_LL</SourceFolder>
			<DestinationFolder>samples\LEDBlink_LL</DestinationFolder>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\UnitTests\TestHAL</SourceFolder>
			<DestinationFolder>samples\UnitTests\TestHAL</DestinationFolder>
			<IsTestProjectSample>true</IsTestProjectSample>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\FreeRTOS</SourceFolder>
			<DestinationFolder>samples\FreeRTOS</DestinationFolder>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\AzureRTOS</SourceFolder>
			<DestinationFolder>samples\AzureRTOS</DestinationFolder>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
	</SmartSamples>
	<InitializationCodeInsertionPoints>
		<CodeInsertionPoint>
			<Regex>int[ \t]+main[ \t]*\([ \t]*(void|)[ \t]*\)[ \t\r\n]*\{[^\}]+\n([ \t]+)(HAL_Init[ \t]*\([ \t]*\);)[ \t\r]*\n([ \t]+)(SystemClock_Config[ \t]*\([ \t]*\);)</Regex>
			<InitGroupNumber>5</InitGroupNumber>
			<InsertAfterGroup>true</InsertAfterGroup>
			<IndentationGroupNumber>4</IndentationGroupNumber>
		</CodeInsertionPoint>	
		<CodeInsertionPoint>
			<Regex>int[ \t]+main[ \t]*\([ \t]*(void|)[ \t]*\)[ \t\r\n]*\{[^\}]+\n([ \t]+)(HAL_Init[ \t]*\([ \t]*\);)</Regex>
			<InitGroupNumber>3</InitGroupNumber>
			<IndentationGroupNumber>2</IndentationGroupNumber>
			<InsertAfterGroup>true</InsertAfterGroup>
		</CodeInsertionPoint>
	</InitializationCodeInsertionPoints>
</FamilyDefinition>
