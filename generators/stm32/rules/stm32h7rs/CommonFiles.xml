<?xml version="1.0"?>
<FamilyDefinition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<AdditionalFrameworks>
		<Framework>
			<Name>FreeRTOS</Name>
			<ID>com.sysprogs.arm.stm32.freertos</ID>
			<ProjectFolderName>FreeRTOS</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\Third_Party\FreeRTOS</SourceFolder>
					<FilesToCopy>*.c;*.h;*.url;*.txt</FilesToCopy>
					<ProjectInclusionMask>-*template.c;-*template.h;-*.url;Source\Portable\MemMang\*;Source\portable\GCC\*;-Source\Portable\*;*</ProjectInclusionMask>
					<AutoIncludeMask/>
					<PreprocessorMacros>USE_FREERTOS</PreprocessorMacros>
					<AdditionalIncludeDirs>$$SYS:BSP_ROOT$$/FreeRTOS/Source/$$com.sysprogs.bspoptions.stm32.freertos.cmsis$$;$$SYS:BSP_ROOT$$/FreeRTOS/Source/Include;$$SYS:BSP_ROOT$$/FreeRTOS/Source/Portable/gcc/ARM_$$com.sysprogs.bspoptions.stm32.freertos.portcore$$</AdditionalIncludeDirs>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.freertos.|FreeRTOS</SmartPropertyGroup>
					<SmartFileConditions>
						<string>Heap Implementation[heap]|
Source\\portable\\MemMang\\heap_1.c=>Heap1 - no support for freeing[heap_1];
Source\\portable\\MemMang\\heap_2.c=>Heap2 - no block consolidation[heap_2];
Source\\portable\\MemMang\\heap_3.c=>Heap3 - use newlib malloc()/free()[heap_3];
Source\\portable\\MemMang\\heap_4.c=>+Heap4 - contiguous heap area[heap_4];
Source\\portable\\MemMang\\heap_5.c=>Heap5 - scattered heap area[heap_5]
						</string>
						<string>CPU Core support[portcore]|
Source\\portable\\GCC\\ARM_CM0\\.*=>ARM Cortex M0[CM0];
Source\\portable\\GCC\\ARM_CM23\\non_secure\\.*=>ARM Cortex M23 (TrustZone - non-secure partition)[CM23/non_secure]];
Source\\portable\\GCC\\ARM_CM23\\secure\\.*=>ARM Cortex M23 (TrustZone - secure partition)[CM23/secure];
Source\\portable\\GCC\\ARM_CM23_NTZ\\non_secure\\.*=>ARM Cortex M23 (no TrustZone)[CM23_NTZ/non_secure];
Source\\portable\\GCC\\ARM_CM3\\.*=>+ARM Cortex M3 or M4 with Software FP[CM3];
Source\\portable\\GCC\\ARM_CM3_MPU\\.*=>ARM Cortex M3 with MPU[CM3_MPU];
Source\\portable\\GCC\\ARM_CM33\\non_secure\\.*=>ARM Cortex M33 (TrustZone - non-secure partition)[CM33/non_secure]];
Source\\portable\\GCC\\ARM_CM33\\secure\\.*=>ARM Cortex M33 (TrustZone - secure partitione)[CM33/secure];
Source\\portable\\GCC\\ARM_CM33_NTZ\\non_secure\\.*=>ARM Cortex M33 (no TrustZone)[CM33_NTZ/non_secure];
Source\\portable\\GCC\\ARM_CM4_MPU\\.*=>ARM Cortex M4 with MPU[CM4_MPU];
Source\\portable\\GCC\\ARM_CM4F\\.*=>ARM Cortex M4 with FP[CM4_MPU];
Source\\portable\\GCC\\ARM_CM7\\.*=>ARM Cortex M7[CM7/r0p1];
						</string>
						<string>CMSIS RTOS Interface Version[cmsis]|
Source\\CMSIS_RTOS_V2\\.*=>v2[CMSIS_RTOS_V2]
						</string>
					</SmartFileConditions>
				</CopyJob>
			</CopyJobs>
			<ConfigFiles>
				<ConfigFileDefinition>
					<Path>$$STM32:H7RS_DIR$$\Middlewares\Third_Party\FreeRTOS\source\include\FreeRTOSConfig_template.h</Path>
					<FinalName>FreeRTOSConfig.h</FinalName>
					<ParserClass>BSPGenerationTools.ConfigFiles.FreeRTOSConfigParser</ParserClass>
					<TargetPathForInsertingIntoProject>$$SYS:BSP_ROOT$$/FreeRTOS/Source/include/FreeRTOSConfig_template.h</TargetPathForInsertingIntoProject>
				</ConfigFileDefinition>
			</ConfigFiles>
			<AdditionalSystemVars>
				<SysVarEntry>
					<Key>com.sysprogs.rtos_type</Key>
					<Value>com.sysprogs.freertos</Value>
				</SysVarEntry>
			</AdditionalSystemVars>
		</Framework>
		<Framework>
			<Name>STM32 Utilities</Name>
			<ID>com.sysprogs.arm.stm32.utilities</ID>
			<ProjectFolderName>Utilities</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Utilities</SourceFolder>
					<FilesToCopy>CPU\*;Fonts\*;Log\*</FilesToCopy>
					<ProjectInclusionMask>-*conf_template.h;*.c;*.h</ProjectInclusionMask>
					<SimpleFileConditions>
						<string>CPU\\*: $$com.sysprogs.bspoptions.stm32.utils.cpu$$ == 1</string>
						<string>Fonts\\*: $$com.sysprogs.bspoptions.stm32.utils.fonts$$ == 1</string>
						<string>Log\\*: $$com.sysprogs.bspoptions.stm32.utils.log$$ == 1</string>
					</SimpleFileConditions>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>AzureRTOS - ThreadX</Name>
			<ID>com.sysprogs.arm.stm32.threadx</ID>
			<ProjectFolderName>ThreadX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\threadx</SourceFolder>
					<TargetFolder>AzureRTOS\threadx</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
					<!-- tx_initialize_low_level.S included in m23/m33 ports is redundant against the sample projects -->
					<ProjectInclusionMask>common\*.c;common\*.h;-*\example_build\*;-*\tx_initialize_low_level.*;ports\cortex_*\gnu\*</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.threadx.|ThreadX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<AdditionalIncludeDirs>common/inc;ports/cortex_$$com.sysprogs.bspoptions.arm.core$$/gnu/inc</AdditionalIncludeDirs>
					<SmartPreprocessorMacros>
						<string>Include user-provided definition file[user_define]|{0}|TX_INCLUDE_USER_DEFINE_FILE</string>
					</SmartPreprocessorMacros>
					<SimpleFileConditions> 
						<string>ports\\cortex_a7\\.*:$$com.sysprogs.bspoptions.arm.core$$==A7</string>
						<string>ports\\cortex_m0\\.*:$$com.sysprogs.bspoptions.arm.core$$==M0</string>
						<string>ports\\cortex_m3\\.*:$$com.sysprogs.bspoptions.arm.core$$==M3</string>
						<string>ports\\cortex_m4\\.*:$$com.sysprogs.bspoptions.arm.core$$==M4</string>
						<string>ports\\cortex_m7\\.*:$$com.sysprogs.bspoptions.arm.core$$==M7</string>
						<string>ports\\cortex_m23\\.*:$$com.sysprogs.bspoptions.arm.core$$==M23</string>
						<string>ports\\cortex_m33\\.*:$$com.sysprogs.bspoptions.arm.core$$==M33</string>
						<string>ports\\cortex_m55\\.*:$$com.sysprogs.bspoptions.arm.core$$==M55</string>
						<string>ports\\cortex_m85\\.*:$$com.sysprogs.bspoptions.arm.core$$==M85</string>
						<string>common\\src\\tx_thread_stack_error_(handler|notify)\.[ch]:$$com.sysprogs.bspoptions.arm.core$$=~[AM][0-9]$</string>
					</SimpleFileConditions>
					<AdvancedRenameRules>\\(tx_misra)\.c$=>{1}_c.c</AdvancedRenameRules>					
				</CopyJob>
			</CopyJobs>
			<AdditionalSystemVars>
				<SysVarEntry>
					<Key>com.sysprogs.rtos_type</Key>
					<Value>com.sysprogs.threadx</Value>
				</SysVarEntry>
			</AdditionalSystemVars>
		</Framework>
		<Framework>
			<Name>AzureRTOS - FileX</Name>
			<ID>com.sysprogs.arm.stm32.filex</ID>
			<ProjectFolderName>FileX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\filex</SourceFolder>
					<TargetFolder>AzureRTOS\filex</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
					<ProjectInclusionMask>-common\drivers\template\*;common\*.c;common\*.h;ports\cortex_*\*.c;ports\cortex_*\*.h;</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.filex.|FileX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<AdditionalIncludeDirs>common/inc;ports/cortex_$$com.sysprogs.bspoptions.arm.core$$/gnu/inc</AdditionalIncludeDirs>
					<SimpleFileConditions> 
						<string>ports\\cortex_m0\\.*:$$com.sysprogs.bspoptions.arm.core$$==M0</string>
						<string>ports\\cortex_m3\\.*:$$com.sysprogs.bspoptions.arm.core$$==M3</string>
						<string>ports\\cortex_m4\\.*:$$com.sysprogs.bspoptions.arm.core$$==M4</string>
						<string>ports\\cortex_m7\\.*:$$com.sysprogs.bspoptions.arm.core$$==M7</string>
					</SimpleFileConditions>
					<SmartFileConditions>
						<string>-NAND driver[levelx_nand]|.*\\fx_stm32_levelx_nand_driver\.(h|c)</string>
						<string>-NOR driver[levelx_nor]|.*\\fx_stm32_levelx_nor_driver\.(h|c)</string>
						<string>-MMC driver[mmc]|.*\\fx_stm32_mmc_driver\.(h|c)</string>
						<string>-SD driver[sd]|.*\\fx_stm32_sd_driver\.(h|c)</string>
						<string>-SRAM driver[sram]|.*\\fx_stm32_sram_driver\.(h|c)</string>
					</SmartFileConditions>
				</CopyJob>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\filex\ports\generic</SourceFolder>
					<TargetFolder>AzureRTOS\filex\ports\cortex_m33\gnu</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>AzureRTOS - LevelX</Name>
			<ID>com.sysprogs.arm.stm32.levelx</ID>
			<ProjectFolderName>LevelX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\levelx</SourceFolder>
					<TargetFolder>AzureRTOS\levelx</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
					<ProjectInclusionMask>-common\drivers\template\*;common\*.c;common\*.h;ports\cortex_*\*.c;ports\cortex_*\*.h;</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.levelx.|LevelX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<AdditionalIncludeDirs>common/inc</AdditionalIncludeDirs>
					<SmartFileConditions>
						<string>-NAND simulator driver[nand_simulator]|.*\\lx_stm32_nand_simulator_driver\.(h|c)</string>
						<string>-NOR simulator driver[nor_simulator]|.*\\lx_stm32_nor_simulator_driver\.(h|c)</string>
						<string>-OSPI simulator driver[ospi]|.*\\lx_stm32_ospi_driver\.(h|c)</string>
						<string>-QSPI simulator driver[qspi]|.*\\lx_stm32_qspi_driver\.(h|c)</string>
					</SmartFileConditions>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>AzureRTOS - USBX</Name>
			<ID>com.sysprogs.arm.stm32.usbx</ID>
			<ProjectFolderName>USBX</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\usbx</SourceFolder>
					<TargetFolder>AzureRTOS\usbx</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask>-ports*;*.h</AutoIncludeMask>
					<AdditionalIncludeDirs>ports/cortex_$$com.sysprogs.bspoptions.arm.core$$/gnu/inc</AdditionalIncludeDirs>
					<ProjectInclusionMask>common\*.c;common\*.h;ports\cortex_*\gnu\*.c;ports\cortex_*\gnu\*.h;</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.usbx.|USBX</SmartPropertyGroup>
					<ExcludeFromVendorSampleMapping>true</ExcludeFromVendorSampleMapping>
					<SimpleFileConditions> 
						<string>ports\\cortex_a7\\.*:$$com.sysprogs.bspoptions.arm.core$$==A7</string>
						<string>ports\\cortex_m0\\.*:$$com.sysprogs.bspoptions.arm.core$$==M0</string>
						<string>ports\\cortex_m3\\.*:$$com.sysprogs.bspoptions.arm.core$$==M3</string>
						<string>ports\\cortex_m4\\.*:$$com.sysprogs.bspoptions.arm.core$$==M4</string>
						<string>ports\\cortex_m7\\.*:$$com.sysprogs.bspoptions.arm.core$$==M7</string>
					</SimpleFileConditions>
					<SmartFileConditions>
						<string>-USB Host Support[host_controllers]|common\\usbx(|_stm32)_host_controllers\\.*</string>
						<string>-USB Device Support[device_controllers]|common\\usbx(|_stm32)_device_controllers\\.*</string>
						<string>-Network Support[network]|common\\usbx_network\\.*</string>
						<string>-Pictbridge Support[pictbridge]|common\\usbx_pictbridge\\.*</string>
						
						<string>-Audio Device Class[device_class_audio]|common\\usbx_device_classes\\src\\ux_device_class_audio.*</string>
						<string>-CCID Class[device_class_ccid]|common\\usbx_device_classes\\src\\ux_device_class_ccid.*</string>
						<string>-CDC ACM Device Class[device_class_cdc_acm]|common\\usbx_device_classes\\src\\ux_device_class_cdc_acm.*</string>
						<string>-CDC ECM Device Class[device_class_cdc_ecm]|common\\usbx_device_classes\\src\\ux_device_class_cdc_ecm.*</string>
						<string>-DFU Device Class[device_class_dfu]|common\\usbx_device_classes\\src\\ux_device_class_dfu.*</string>
						<string>-HID Device Class[device_class_hid]|common\\usbx_device_classes\\src\\ux_device_class_hid.*</string>
						<string>-PIMA Device Class[device_class_pima]|common\\usbx_device_classes\\src\\ux_device_class_pima.*</string>
						<string>-Printer Device Class[device_class_printer]|common\\usbx_device_classes\\src\\ux_device_class_printer.*</string>
						<string>-RNDIS Device Class[device_class_rndis]|common\\usbx_device_classes\\src\\ux_device_class_rndis.*</string>
						<string>-Storage Device Class[device_class_storage]|common\\usbx_device_classes\\src\\ux_device_class_storage.*</string>
						<string>-Video Device Class[device_class_video]|common\\usbx_device_classes\\src\\ux_device_class_video.*</string>

						<string>-ASIX Host Class[host_class_asix]|common\\usbx_host_classes\\src\\ux_host_class_asix.*</string>
						<string>-Audio Host Class[host_class_audio]|common\\usbx_host_classes\\src\\ux_host_class_audio.*</string>
						<string>-CDC_ACM Host Class[host_class_cdc_acm]|common\\usbx_host_classes\\src\\ux_host_class_cdc_acm.*</string>
						<string>-CDC_ECM Host Class[host_class_cdc_ecm]|common\\usbx_host_classes\\src\\ux_host_class_cdc_ecm.*</string>
						<string>-GSER Host Class[host_class_gser]|common\\usbx_host_classes\\src\\ux_host_class_gser.*</string>
						<string>-HID Host Class[host_class_hid]|common\\usbx_host_classes\\src\\ux_host_class_hid.*</string>
						<string>-Hub Host Class[host_class_hub]|common\\usbx_host_classes\\src\\ux_host_class_hub.*</string>
						<string>-PIMA Host Class[host_class_pima]|common\\usbx_host_classes\\src\\ux_host_class_pima.*</string>
						<string>-Printer Host Class[host_class_printer]|common\\usbx_host_classes\\src\\ux_host_class_printer.*</string>
						<string>-Prolific Host Class[host_class_prolific]|common\\usbx_host_classes\\src\\ux_host_class_prolific.*</string>
						<string>-Storage Host Class[host_class_storage]|common\\usbx_host_classes\\src\\ux_host_class_storage.*</string>
						<string>-SWAR Host Class[host_class_swar]|common\\usbx_host_classes\\src\\ux_host_class_swar.*</string>
						<string>-Video Host Class[host_class_video]|common\\usbx_host_classes\\src\\ux_host_class_video.*</string>
					</SmartFileConditions>
				</CopyJob>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\usbx\ports\generic</SourceFolder>
					<TargetFolder>AzureRTOS\usbx\ports\cortex_m33\gnu</TargetFolder>
					<FilesToCopy>*</FilesToCopy>
					<AutoIncludeMask/>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>STM32 External Memory Loader</Name>
			<ID>com.sysprogs.arm.stm32.extmem.loader.h7rs</ID>
			<ClassID>com.sysprogs.arm.stm32.extmem.loader</ClassID>
			<ProjectFolderName>External Memory Loader</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<RequiredFrameworks>
				<string>com.sysprogs.arm.stm32.hal</string>
			</RequiredFrameworks>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\STM32_ExtMem_Loader</SourceFolder>
					<FilesToCopy>-EWARM\*;-MDK-ARM\*;*</FilesToCopy>
					<ProjectInclusionMask>-*template.c;-*template.h;*.c;*.h</ProjectInclusionMask>
				</CopyJob>
			</CopyJobs>
		</Framework>
		<Framework>
			<Name>STM32 External Memory Manager</Name>
			<ID>com.sysprogs.arm.stm32.extmem.manager.h7rs</ID>
			<ClassID>com.sysprogs.arm.stm32.extmem.manager</ClassID>
			<ProjectFolderName>External Memory Manager</ProjectFolderName>
			<DefaultEnabled>false</DefaultEnabled>
			<CopyJobs>
				<CopyJob>
					<SourceFolder>$$STM32:H7RS_DIR$$\Middlewares\ST\STM32_ExtMem_Manager</SourceFolder>
					<FilesToCopy>*</FilesToCopy>
					<ProjectInclusionMask>-*template.c;-*template.h;*.c;*.h</ProjectInclusionMask>
					<SmartPropertyGroup>com.sysprogs.bspoptions.stm32.extmem.manager.|External Memory Manager</SmartPropertyGroup>
					<SmartFileConditions>
						<string>-LRUN support[lrun]|.*\\stm32_boot_lrun.c</string>
					</SmartFileConditions>					
				</CopyJob>
			</CopyJobs>
		</Framework>
		
	</AdditionalFrameworks>
	<SmartSamples>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\LEDBlink</SourceFolder>
			<DestinationFolder>samples\LEDBlink</DestinationFolder>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
		<SmartSample>
			<SourceFolder>$$BSPGEN:RULES_DIR$$\samples\FreeRTOS</SourceFolder>
			<DestinationFolder>samples\FreeRTOS</DestinationFolder>
			<AdditionalSources>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_system_file$$</string>
				<string>$$SYS:BSP_ROOT$$/$$com.sysprogs.bspoptions.stm32.hal_config_template_file$$=>$$com.sysprogs.stm32.hal_header_prefix$$_hal_conf.h</string>
			</AdditionalSources>
		</SmartSample>
	</SmartSamples>
	<InitializationCodeInsertionPoints>
		<CodeInsertionPoint>
			<Regex>int[ \t]+main[ \t]*\([ \t]*(void|)[ \t]*\)[ \t\r\n]*\{[^\}]+\n([ \t]+)(HAL_Init[ \t]*\([ \t]*\);)[ \t\r]*\n([ \t]+)(SystemClock_Config[ \t]*\([ \t]*\);)</Regex>
			<InitGroupNumber>5</InitGroupNumber>
			<InsertAfterGroup>true</InsertAfterGroup>
			<IndentationGroupNumber>4</IndentationGroupNumber>
		</CodeInsertionPoint>	
		<CodeInsertionPoint>
			<Regex>int[ \t]+main[ \t]*\([ \t]*(void|)[ \t]*\)[ \t\r\n]*\{[^\}]+\n([ \t]+)(HAL_Init[ \t]*\([ \t]*\);)</Regex>
			<InitGroupNumber>3</InitGroupNumber>
			<IndentationGroupNumber>2</IndentationGroupNumber>
			<InsertAfterGroup>true</InsertAfterGroup>
		</CodeInsertionPoint>
	</InitializationCodeInsertionPoints>
</FamilyDefinition>
